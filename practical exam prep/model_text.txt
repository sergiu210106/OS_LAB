A
1. Write a bash script that takes as argument the provided DesignatedPoint.xml file. The script shall:
a) validate the provided argument is a file that exists (0.5p)
b) print total number of DesignatedPoint entities (0.5p)
c) print total number of DesignatedPoint entities per type property (1.5p)
d) extract into a separate file, names.txt, the aixm:name values of those entities that have type=ICAO (2p)
e) replace 'urn:ogc:def:crs:EPSG::4326' timestamp with 'CRS84' in the same file (1.5p)


B
1. Write a bash script that takes as argument the provided FlightRestriction.xml file. The script shall:
a) validate the provided argument is a file that exists (0.5p)
b) print total number of FlightRestriction entities (0.5p)
c) print total number of FlightRestriction entities per type property (1.5p)
d) extract into a separate file, forbid.txt, the gml:identifiers values of those entities that have type=FORBID (2p)
e) replace 2020-12-03T00:00:00 timestamp with 2025-12-03T00:00:00 in the same file (1.5p)


Common
2. The following C program contains mistakes. Fix it! (3p)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/wait.h>

int main() {
    int fd[2];
    char buffer[100];
    pid_t pid;

    pipe(fd);

    int file = open("output.txt", "r");

    pid = fork();

    if (pid < 0) {
        printf("Fork failed\n");
    }
    else if (pid == 0) {
        // Child process
        read(fd[0], buffer, 100);
        printf("Child read: %s\n", buffer);

        write(file, buffer, strlen(buffer)); 
        close(fd[0]);       
    }
    else {
        // Parent process
        close(fd[0]);
        char *message = "Hello from parent!";
        write(fd[1], message, strlen(message));
        close(fd[1]);

        wait(); 
    }

    return 0;
}

A 
#!/bin/bash

# Check if the file argument is provided
if [ -z "$1" ]; then
  echo "Error: Please provide the XML file as an argument."
  exit 1
fi

# Check if the file exists
if [ ! -f "$1" ]; then
  echo "Error: File '$1' does not exist."
  exit 1
fi

# b) Print total number of DesignatedPoint entities
total_points=$(grep -c '<DesignatedPoint' "$1")
echo "Total number of DesignatedPoint entities: $total_points"

# c) Print total number of DesignatedPoint entities per type property
echo "DesignatedPoint entities per type:"
grep '<type>' "$1" | awk -F'>|<' '{print $3}' | sort | uniq -c

# d) Extract aixm:name values of entities with type=ICAO to names.txt
grep '<DesignatedPoint' "$1" |
  while IFS= read -r line; do
    type=$(echo "$line" | grep -o '<type>[^<]*' | awk -F'>|<' '{print $2}')
    if [ "$type" = "ICAO" ]; then
      name=$(echo "$line" | grep -o '<aixm:name>[^<]*' | awk -F'>|<' '{print $2}')
      echo "$name" >> names.txt
    fi
  done

# e) Replace 'urn:ogc:def:crs:EPSG::4326' with 'CRS84' in the file
sed -i 's/urn:ogc:def:crs:EPSG::4326/CRS84/g' "$1"

echo "Processing complete."

exit 0

B
#!/bin/bash

# Check if the file argument is provided
if [ -z "$1" ]; then
  echo "Error: Please provide the XML file as an argument."
  exit 1
fi

# Check if the file exists
if [ ! -f "$1" ]; then
  echo "Error: File '$1' does not exist."
  exit 1
fi

# b) Print total number of FlightRestriction entities
total_restrictions=$(grep -c '<FlightRestriction' "$1")
echo "Total number of FlightRestriction entities: $total_restrictions"

# c) Print total number of FlightRestriction entities per type property
echo "FlightRestriction entities per type:"
grep '<type>' "$1" | awk -F'>|<' '{print $3}' | sort | uniq -c

# d) Extract gml:identifier values of entities with type=FORBID to forbid.txt
grep '<FlightRestriction' "$1" |
  while IFS= read -r line; do
    type=$(echo "$line" | grep -o '<type>[^<]*' | awk -F'>|<' '{print $2}')
    if [ "$type" = "FORBID" ]; then
      identifier=$(echo "$line" | grep -o '<gml:identifier>[^<]*' | awk -F'>|<' '{print $2}')
      echo "$identifier" >> forbid.txt
    fi
  done

# e) Replace 2020-12-03T00:00:00 with 2025-12-03T00:00:00 in the file
sed -i 's/2020-12-03T00:00:00/2025-12-03T00:00:00/g' "$1"

echo "Processing complete."

exit 0

C 
close(fd[1]);      // Close the write end of the pipe in the child
open() Mode: The original code opened "output.txt" for reading ("r"), but it's used for writing. 
Explicit exit(): The child process now calls exit(0) explicitly.
wait(NULL): Using wait(NULL) is correct if the parent doesn't need the child's exit status. 