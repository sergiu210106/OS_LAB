UNIX PROCESSES AND IPC

1. Processes
    - ps -e -> list all processes
    - ps -f -u <username> -> list all processes of a specific user
    - ps -p <PID> -> lists the process with the given PID

2. Process creation in C

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();
    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) {
        printf("Child: PID = %d\n", getpid());
    } else {
        printf("Parent: PID = %d\n Child: PID = %d\n", getpid(), pid);
    }
    return 0;
}

3. Process Control

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

int main() {
	pid_t pid = fork();
	
	if (pid == 0) {
		printf("Child: Existing\n");
		return 5;
	} else if (pid > 0) {
		int status;
		wait(&status);
		if (WIFEXITED(status)) {
			printf("Parent: Child exited with status: %d\n", WEXITSTATUS(status));
		}
	}

	return 0;
}

4. Pipes

#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main() {
	int pipefd[2];
	char buffer[20];

	if (pipe(pipefd) == -1) {
		perror("pipe error");
		return 1;
	}

	if (fork() == 0) {
		close(pipefd[1]);
		read(pipefd[0], buffer, sizeof(buffer));

		printf("Child received: %s\n", buffer);

		close(pipefd[0]);
	} else {
		close(pipefd[0]);
		write(pipefd[1], "Hello from parent", strlen("Hello from parent") + 1);
		close(pipefd[1]);
		wait(NULL);
	}
	return 0;
}

// another example

#include <stdio.h>
#include <unistd.h>

int main() {
	int p2c[2], c2p[2];
	pipe(p2c);
	pipe(c2p);

	if (fork() == 0) {
		int a, b, s;
		close(p2c[1]);
		close(c2p[0]);

		read(p2c[0], &a, sizeof(int));
		read(p2c[0], &b, sizeof(int));

		s = a + b;
		write(c2p[1], &s, sizeof(int));
		close(p2c[0]);
		close(c2p[1]);
		return 0;
	} else {
		int a = 5, b = 10, sum;
		close(p2c[0]); 
		close(c2p[1]);

		write(p2c[1], &a, sizeof(int));
		write(p2c[1], &b, sizeof(int));
		read(c2p[0], &sum, sizeof(int));
		printf("Sum: %d\n", sum);
		close(c2p[0]);
		close(c2p[1]);
		wait(NULL);
		return 0;
	}
}

